% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chemistrycalcs.R
\name{locate_fourth_atom_position}
\alias{locate_fourth_atom_position}
\title{Locate fourth atom position or bond vector from dihedral parameters}
\usage{
locate_fourth_atom_position(
  a,
  b,
  c,
  bond_angle,
  bond_length,
  torsion_angle,
  return_bond_vector = FALSE
)
}
\arguments{
\item{a}{Numeric vector of length 3 giving the xyz coordinates of atom A.}

\item{b}{Numeric vector of length 3 giving the xyz coordinates of atom B.}

\item{c}{Numeric vector of length 3 giving the xyz coordinates of atom C.}

\item{bond_angle}{Numeric scalar giving the B-C-D bond angle in degrees.}

\item{bond_length}{Numeric scalar giving the C-D bond length.}

\item{torsion_angle}{Numeric scalar giving the A-B-C-D torsion angle in degrees.}

\item{return_bond_vector}{Logical; if \code{TRUE}, returns the bond vector
(relative to atom C) that when added to C gives the position of D.
If \code{FALSE} (default), returns the absolute coordinates of atom D.}
}
\value{
A numeric vector of length 3 giving either:
\describe{
\item{If \code{return_bond_vector = FALSE} (default)}{The absolute coordinates of atom D}
\item{If \code{return_bond_vector = TRUE}}{The bond vector from C to D}
}
}
\description{
Calculates either the absolute position of atom D or the bond vector (relative to atom C)
in an A-B-C-D molecular geometry given the positions of atoms A, B, C and the
desired bond angle, bond length, and torsion angle parameters.
}
\details{
This function uses the \code{compas::calCo} function to compute the position
of atom D based on the three preceding atoms (A, B, C) and the specified
geometric parameters. By default, it returns the absolute position of atom D,
which is the most common use case.
}
\examples{
# Define first three atoms
a <- c(0, 0, 0)
b <- c(1, 0, 0)
c <- c(1, 1, 0)

# Locate absolute position of fourth atom (default behavior)
d_position <- locate_fourth_atom_position(a, b, c, 
  bond_angle = 109.5, bond_length = 1.5, torsion_angle = 60)
print(d_position)

# Get bond vector instead
bond_vector <- locate_fourth_atom_position(a, b, c, 
  bond_angle = 109.5, bond_length = 1.5, torsion_angle = 60, 
  return_bond_vector = TRUE)
print(bond_vector)

# Verify: bond_vector + c should equal d_position
print(c + bond_vector)

}
\seealso{
\code{\link{compute_abcd_dihedral_stats}} for computing dihedral
parameters from atomic positions.
}
