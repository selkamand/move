% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chemistrycalcs.R
\name{compute_fourth_atom_position}
\alias{compute_fourth_atom_position}
\title{Compute fourth atom position or bond vector from dihedral parameters}
\usage{
compute_fourth_atom_position(
  a,
  b,
  c,
  bond_angle,
  bond_length,
  torsion_angle,
  return_absolute_position = FALSE
)
}
\arguments{
\item{a}{Numeric vector of length 3 giving the xyz coordinates of atom A.}

\item{b}{Numeric vector of length 3 giving the xyz coordinates of atom B.}

\item{c}{Numeric vector of length 3 giving the xyz coordinates of atom C.}

\item{bond_angle}{Numeric scalar giving the B-C-D bond angle in degrees.}

\item{bond_length}{Numeric scalar giving the C-D bond length.}

\item{torsion_angle}{Numeric scalar giving the A-B-C-D torsion angle in degrees.}

\item{return_absolute_position}{Logical; if \code{TRUE}, returns the absolute
coordinates of atom D. If \code{FALSE} (default), returns the bond vector
(relative to atom C) that when added to C gives the position of D.}
}
\value{
A numeric vector of length 3 giving either:
\describe{
\item{If \code{return_absolute_position = FALSE} (default)}{The bond vector from C to D}
\item{If \code{return_absolute_position = TRUE}}{The absolute coordinates of atom D}
}
}
\description{
Calculates either the bond vector (relative to atom C) or absolute position of atom D
in an A-B-C-D molecular geometry given the positions of atoms A, B, C and the
desired bond angle, bond length, and torsion angle parameters.
}
\details{
This function uses the \code{compas::calCo} function to compute the position
of atom D based on the three preceding atoms (A, B, C) and the specified
geometric parameters. By default, it returns the bond vector (D - C) which
is often more useful for molecular modeling applications.
}
\examples{
# Define first three atoms
a <- c(0, 0, 0)
b <- c(1, 0, 0)
c <- c(1, 1, 0)

# Compute bond vector (default behavior)
bond_vector <- compute_fourth_atom_position(a, b, c, bond_angle = 109.5, bond_length = 1.5, torsion_angle = 60)
print(bond_vector)

# Get absolute position of fourth atom
d_position <- compute_fourth_atom_position(a, b, c, bond_angle = 109.5, bond_length = 1.5, torsion_angle = 60, return_absolute_position = TRUE)
print(d_position)

# Verify: bond_vector + c should equal d_position
print(c + bond_vector)

}
\seealso{
\code{\link{compute_abcd_dihedral_stats}} for computing dihedral
parameters from atomic positions.
}
